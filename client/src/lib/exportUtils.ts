import { TextStats, ReadabilityStats, KeywordAnalysis } from './textAnalysis';
import { prepareDownload } from './downloadHelper';

export interface ExportData {
  text: string;
  stats: TextStats;
  readability: ReadabilityStats;
  keywords: KeywordAnalysis;
  timestamp: string;
}

export function exportCSV(data: ExportData): void {
  const csvContent = [
    ['Metric', 'Value'],
    ['Word Count', data.stats.wordCount.toString()],
    ['Character Count', data.stats.charCount.toString()],
    ['Character Count (No Spaces)', data.stats.charNoSpaces.toString()],
    ['Sentence Count', data.stats.sentenceCount.toString()],
    ['Paragraph Count', data.stats.paragraphCount.toString()],
    ['Average Word Length', data.stats.avgWordLength.toString()],
    ['Longest Word', data.stats.longestWord],
    ['Shortest Word', data.stats.shortestWord],
    ['Readability Score', data.readability.score.toString()],
    ['Reading Time (minutes)', data.readability.readingTime.toString()],
    ['Speaking Time (minutes)', data.readability.speakingTime.toString()]
  ].map(row => row.join(',')).join('\n');

  prepareDownload({
    content: csvContent,
    filename: 'word-analysis.csv',
    fileType: 'csv',
    mimeType: 'text/csv'
  });
}

export function exportTXT(data: ExportData): void {
  const txtContent = `Word Analysis Report
Generated: ${new Date().toLocaleString()}

=== BASIC STATISTICS ===
Word Count: ${data.stats.wordCount}
Character Count: ${data.stats.charCount}
Character Count (No Spaces): ${data.stats.charNoSpaces}
Sentence Count: ${data.stats.sentenceCount}
Paragraph Count: ${data.stats.paragraphCount}
Average Word Length: ${data.stats.avgWordLength}
Longest Word: ${data.stats.longestWord}
Shortest Word: ${data.stats.shortestWord}

=== READABILITY ANALYSIS ===
Flesch-Kincaid Score: ${data.readability.score}
Estimated Reading Time: ${data.readability.readingTime} minutes
Estimated Speaking Time: ${data.readability.speakingTime} minutes

=== TOP KEYWORDS ===
${data.keywords.single.slice(0, 5).map(k => `${k.keyword}: ${k.count} (${k.percentage}%)`).join('\n')}

=== ORIGINAL TEXT ===
${data.text}`;

  prepareDownload({
    content: txtContent,
    filename: 'word-analysis.txt',
    fileType: 'txt',
    mimeType: 'text/plain'
  });
}

export function exportPDF(data: ExportData): void {
  Promise.all([
    import("jspdf"),
    import("html2canvas"),
  ])
    .then(([jsPDFModule, html2canvasModule]) => {
      const jsPDF = jsPDFModule.default;
      const html2canvas = html2canvasModule.default;

      const doc = new jsPDF();
      
      const pageWidth = doc.internal.pageSize.width;
      const pageHeight = doc.internal.pageSize.height;
      const margin = 20;
      const maxWidth = pageWidth - 2 * margin;
      
      const addHeader = (pageNum: number) => {
        doc.setFillColor(220, 38, 38);
        doc.rect(0, 0, pageWidth, 25, 'F');
        
        doc.setTextColor(255, 255, 255);
        doc.setFontSize(20);
        doc.setFont("helvetica", "bold");
        doc.text("📝 Word Counter Plus", margin, 17);
        
        if (pageNum > 1) {
          doc.setFontSize(8);
          doc.setFont("helvetica", "normal");
          doc.text(`Page ${pageNum}`, pageWidth - margin, 17, { align: 'right' });
        }
      };
      
      const addFooter = (pageNum: number) => {
        doc.setDrawColor(220, 38, 38);
        doc.setLineWidth(0.5);
        doc.line(margin, pageHeight - 20, pageWidth - margin, pageHeight - 20);
        
        doc.setTextColor(100, 100, 100);
        doc.setFontSize(8);
        doc.setFont("helvetica", "normal");
        doc.text("Generated by Word Counter Plus", margin, pageHeight - 12);
        doc.text(`wordcounterplus.com`, pageWidth - margin, pageHeight - 12, { align: 'right' });
        
        doc.setFontSize(7);
        doc.text(`Generated on ${new Date().toLocaleString()}`, margin, pageHeight - 7);
        doc.text(`Page ${pageNum}`, pageWidth - margin, pageHeight - 7, { align: 'right' });
      };

      let yPosition = 35;
      const lineHeight = 7;
      let pageNum = 1;
      
      addHeader(pageNum);
      
      doc.setTextColor(220, 38, 38);
      doc.setFontSize(24);
      doc.setFont("helvetica", "bold");
      doc.text("Text Analysis Report", margin, yPosition);
      yPosition += 10;
      
      doc.setDrawColor(220, 38, 38);
      doc.setLineWidth(0.8);
      doc.line(margin, yPosition, pageWidth - margin, yPosition);
      yPosition += 12;
      
      const addSection = (title: string, items: string[], twoColumn = false) => {
        if (yPosition > pageHeight - 40) {
          addFooter(pageNum);
          doc.addPage();
          pageNum++;
          addHeader(pageNum);
          yPosition = 35;
        }
        
        doc.setFillColor(245, 245, 245);
        doc.roundedRect(margin - 2, yPosition - 5, maxWidth + 4, 10, 2, 2, 'F');
        
        doc.setTextColor(220, 38, 38);
        doc.setFontSize(13);
        doc.setFont("helvetica", "bold");
        doc.text(title, margin + 2, yPosition + 2);
        yPosition += 12;
        
        doc.setTextColor(40, 40, 40);
        doc.setFontSize(10);
        doc.setFont("helvetica", "normal");
        
        if (twoColumn) {
          const colWidth = (maxWidth - 10) / 2;
          items.forEach((item, index) => {
            const col = index % 2;
            const xPos = margin + (col * (colWidth + 10));
            
            if (col === 0 && index > 0) {
              yPosition += lineHeight;
            }
            
            if (yPosition > pageHeight - 40) {
              addFooter(pageNum);
              doc.addPage();
              pageNum++;
              addHeader(pageNum);
              yPosition = 35;
            }
            
            doc.text(item, xPos, yPosition);
          });
          yPosition += lineHeight + 5;
        } else {
          items.forEach(item => {
            if (yPosition > pageHeight - 40) {
              addFooter(pageNum);
              doc.addPage();
              pageNum++;
              addHeader(pageNum);
              yPosition = 35;
            }
            
            doc.setTextColor(220, 38, 38);
            doc.circle(margin + 1, yPosition - 1.5, 0.8, 'F');
            doc.setTextColor(40, 40, 40);
            doc.text(item, margin + 5, yPosition);
            yPosition += lineHeight;
          });
          yPosition += 3;
        }
      };
      
      const basicStats = [
        `Words: ${data.stats.wordCount}`,
        `Characters (with spaces): ${data.stats.charCount}`,
        `Characters (without spaces): ${data.stats.charNoSpaces}`,
        `Sentences: ${data.stats.sentenceCount}`,
        `Paragraphs: ${data.stats.paragraphCount}`,
        `Pages (est.): ${Math.ceil(data.stats.wordCount / 250) || 1}`,
        `Average Word Length: ${data.stats.avgWordLength} characters`,
      ];
      addSection("📊 STATISTICS", basicStats, true);
      
      const readabilityStats = [
        `Reading Time: ${data.readability.readingTime} min`,
        `Speaking Time: ${data.readability.speakingTime} min`,
        `Average Sentence Length: ${Math.round(data.stats.wordCount / (data.stats.sentenceCount || 1))} words`,
        `Longest Word: ${data.stats.longestWord}`,
        `Shortest Word: ${data.stats.shortestWord}`,
      ];
      addSection("📖 READING METRICS", readabilityStats);
      
      const readabilityScore = [
        `Flesch Reading Ease: ${data.readability.score} (${data.readability.level})`,
      ];
      addSection("📈 READABILITY SCORES", readabilityScore);
      
      const keywords = data.keywords.single.slice(0, 10).map((k, i) => 
        `${i + 1}. ${k.keyword} (${k.count} times)`
      );
      if (keywords.length > 0) {
        addSection("🔑 TOP KEYWORDS", keywords);
      }
      
      if (yPosition > pageHeight - 80) {
        addFooter(pageNum);
        doc.addPage();
        pageNum++;
        addHeader(pageNum);
        yPosition = 35;
      }
      
      doc.setFillColor(245, 245, 245);
      doc.roundedRect(margin - 2, yPosition - 5, maxWidth + 4, 10, 2, 2, 'F');
      
      doc.setTextColor(220, 38, 38);
      doc.setFontSize(13);
      doc.setFont("helvetica", "bold");
      doc.text("📄 ORIGINAL TEXT", margin + 2, yPosition + 2);
      yPosition += 12;
      
      doc.setTextColor(40, 40, 40);
      doc.setFontSize(9);
      doc.setFont("helvetica", "normal");
      
      const textLines = doc.splitTextToSize(data.text, maxWidth);
      
      textLines.forEach((line: string) => {
        if (yPosition > pageHeight - 35) {
          addFooter(pageNum);
          doc.addPage();
          pageNum++;
          addHeader(pageNum);
          yPosition = 35;
        }
        doc.text(line, margin, yPosition);
        yPosition += 5;
      });
      
      addFooter(pageNum);
      
      doc.save("word-counter-analysis.pdf");
    })
    .catch(() => {
      alert("Unable to generate PDF. Please try the TXT export option.");
    });
}

function downloadFile(content: string, filename: string, mimeType: string): void {
  const blob = new Blob([content], { type: mimeType });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

export async function copyResultsToClipboard(stats: TextStats, readability: ReadabilityStats): Promise<void> {
  const results = `Word Count: ${stats.wordCount}
Character Count: ${stats.charCount}
Readability Score: ${readability.score} (${readability.level})
Reading Time: ${readability.readingTime} minutes`;

  try {
    await navigator.clipboard.writeText(results);
  } catch (err) {
    console.log('Copy not supported');
    throw new Error('Copy to clipboard not supported');
  }
}

